name: Build Windows GUI

on:
  push:
    tags:
      - 'v*'
  repository_dispatch:
    types: [release-created]
  workflow_dispatch:
    inputs:
      test_build:
        description: 'Test build without release'
        required: false
        default: false
        type: boolean

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install Poetry
      run: |
        (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -
        $env:Path += ";$env:APPDATA\Python\Scripts"
        echo "$env:APPDATA\Python\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
        
    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~\AppData\Local\pypoetry\Cache
          .venv
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-
          
    - name: Install system dependencies
      run: |
        # PyAudio on Windows usually works with pre-built wheels
        # If it fails, we can try installing via pip first
        pip install pyaudio
        
    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-ansi
        
    - name: Install PyInstaller
      run: |
        poetry add --group dev pyinstaller
        
    - name: Build Windows executable
      run: |
        poetry run pyinstaller --name "Volcengine Voice Chat" `
          --windowed `
          --onefile `
          --add-data "static;static" `
          --hidden-import pydub `
          --hidden-import numpy `
          --hidden-import scipy `
          --hidden-import soundfile `
          --hidden-import websockets `
          --hidden-import aiortc `
          --hidden-import av `
          --collect-all pyaudio `
          --collect-all pydantic `
          gui_main.py
          
    - name: Create portable ZIP
      run: |
        $version = "${{ github.ref_name }}"
        if ($version -eq "") { $version = "dev" }
        Compress-Archive -Path "dist\Volcengine Voice Chat.exe" -DestinationPath "dist\VolcengineVoiceChat-${version}-Windows-Portable.zip"
        
    - name: Generate checksums
      run: |
        cd dist
        Get-FileHash -Algorithm SHA256 *.exe, *.zip | Format-Table -Property Hash, Path -AutoSize | Out-File -FilePath checksums-windows.txt
        Get-Content checksums-windows.txt
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: |
          dist/*.exe
          dist/*.zip
          dist/checksums-windows.txt
        retention-days: 30
        
    - name: Create Release (if tag push)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/*.exe
          dist/*.zip
          dist/checksums-windows.txt
        draft: false
        prerelease: false
        generate_release_notes: true
        name: Release ${{ github.ref_name }}
        body: |
          ## Volcengine Voice Chat ${{ github.ref_name }}
          
          ### Windows
          - **Portable**: Download the ZIP file for a portable version (no installation required)
          
          ### Requirements
          - Windows 10/11 (64-bit)
          - Audio input/output devices
          
          ### Checksums
          See `checksums-windows.txt` for file integrity verification.