name: Semantic Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write

jobs:
  release:
    runs-on: ubuntu-latest
    concurrency: release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
        
    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pypoetry
          .venv
        key: ${{ runner.os }}-poetry-release-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-release-
          ${{ runner.os }}-poetry-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev python3-pyaudio
        
    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-ansi
        
    - name: Configure Git
      run: |
        git config --global user.name "semantic-release-bot"
        git config --global user.email "semantic-release-bot@users.noreply.github.com"
        
    - name: Check if release is needed
      id: check
      run: |
        # 检查最近的 commits 是否包含需要发布的类型
        COMMITS=$(git log --format=%s $(git describe --tags --abbrev=0 2>/dev/null || echo HEAD~10)..HEAD 2>/dev/null || git log --format=%s -10)
        
        if echo "$COMMITS" | grep -E '^(feat|fix|perf)(\(.*\))?!?:' > /dev/null; then
          echo "Release needed"
          echo "needs_release=true" >> $GITHUB_OUTPUT
        else
          echo "No release needed (no feat/fix/perf commits)"
          echo "needs_release=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Python Semantic Release
      id: release
      if: steps.check.outputs.needs_release == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get current version before release
        OLD_VERSION=$(poetry run semantic-release version --print)
        echo "Current version: $OLD_VERSION"
        
        # Run semantic-release (version + publish)
        poetry run semantic-release version
        poetry run semantic-release publish
        
        # Get new version after release
        NEW_VERSION=$(poetry run semantic-release version --print)
        echo "New version: $NEW_VERSION"
        
        # Check if version changed
        if [ "$OLD_VERSION" != "$NEW_VERSION" ]; then
          echo "✅ Released version: $NEW_VERSION"
          echo "released=true" >> $GITHUB_OUTPUT
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Ensure tag is pushed to GitHub
          git push origin "v$NEW_VERSION"
          echo "📌 Pushed tag v$NEW_VERSION to GitHub"
        else
          echo "ℹ️ No version change"
          echo "released=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Trigger build workflow
      if: steps.release.outputs.released == 'true'
      run: |
        echo "🚀 Tag created: ${{ steps.release.outputs.tag }}"
        echo "📦 Build workflow will be triggered automatically by the tag push"
        echo "Check progress at: https://github.com/${{ github.repository }}/actions"

  check-commits:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Check commit messages
      uses: wagoid/commitlint-github-action@v6
      with:
        configFile: '.commitlintrc.json'
        helpURL: 'https://www.conventionalcommits.org/'