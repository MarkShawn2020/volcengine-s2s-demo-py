name: Build macOS GUI

on:
  push:
    tags:
      - 'v*'
  repository_dispatch:
    types: [release-created]
  workflow_dispatch:
    inputs:
      test_build:
        description: 'Test build without release'
        required: false
        default: false
        type: boolean

jobs:
  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
        
    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pypoetry
          .venv
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-
          
    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-ansi
        
    - name: Install PyInstaller
      run: |
        poetry add --group dev pyinstaller
        
    - name: Build macOS app
      run: |
        poetry run pyinstaller --name "Volcengine Voice Chat" \
          --windowed \
          --onefile \
          --add-data "static:static" \
          --hidden-import pydub \
          --hidden-import numpy \
          --hidden-import scipy \
          --hidden-import soundfile \
          --hidden-import websockets \
          --hidden-import aiortc \
          --hidden-import av \
          --collect-all pyaudio \
          --collect-all pydantic \
          --osx-bundle-identifier "com.volcengine.voicechat" \
          gui_main.py
          
    - name: Create DMG installer
      run: |
        # Get version
        VERSION="${{ github.ref_name }}"
        if [ -z "$VERSION" ]; then VERSION="dev"; fi
        
        # Create DMG using hdiutil (simpler approach)
        mkdir -p dmg_temp
        cp -r "dist/Volcengine Voice Chat.app" dmg_temp/
        hdiutil create -volname "Volcengine Voice Chat" \
          -srcfolder dmg_temp \
          -ov -format UDZO \
          "dist/VolcengineVoiceChat-${VERSION}-macOS.dmg"
        rm -rf dmg_temp
          
    - name: Generate checksums
      run: |
        cd dist
        shasum -a 256 *.dmg > checksums-macos.txt || shasum -a 256 *.app > checksums-macos.txt
        cat checksums-macos.txt
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-build
        path: |
          dist/*.dmg
          dist/*.app
          dist/checksums-macos.txt
        retention-days: 30
        
    - name: Create Release (if tag push)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/*.dmg
          dist/checksums-macos.txt
        draft: false
        prerelease: false
        generate_release_notes: true
        name: Release ${{ github.ref_name }}
        body: |
          ## Volcengine Voice Chat ${{ github.ref_name }}
          
          ### macOS
          - Download the DMG file
          - Open the DMG and drag the app to Applications
          - First time running: Right-click and select "Open" to bypass Gatekeeper
          
          ### Checksums
          See `checksums-macos.txt` for file integrity verification.